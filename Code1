<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Pomodoro Clock</title>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
  <div id="root"></div>
  <script src="https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/17.0.2/umd/react.production.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/17.0.2/umd/react-dom.production.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.26.0/babel.min.js"></script>
  <script type="text/babel">

    const { useState, useEffect } = React;

    const PomodoroClock = () => {
      const [breakLength, setBreakLength] = useState(5);
      const [sessionLength, setSessionLength] = useState(25);
      const [timerLabel, setTimerLabel] = useState('Session');
      const [timeLeft, setTimeLeft] = useState(sessionLength * 60);
      const [timerRunning, setTimerRunning] = useState(false);

      const [minutes, setMinutes] = useState(sessionLength);
      const [seconds, setSeconds] = useState(0);

      const audioRef = React.createRef();

      useEffect(() => {
        if (timerRunning) {
          const interval = setInterval(() => {
            setTimeLeft(prevTimeLeft => {
              if (prevTimeLeft === 0) {
                audioRef.current.play();
                if (timerLabel === 'Session') {
                  setTimerLabel('Break');
                  setTimeLeft(breakLength * 60);
                } else {
                  setTimerLabel('Session');
                  setTimeLeft(sessionLength * 60);
                }
              }
              return prevTimeLeft - 1;
            });
          }, 1000);

          return () => clearInterval(interval);
        }
      }, [timerRunning, timerLabel, sessionLength, breakLength]);

      useEffect(() => {
        setMinutes(Math.floor(timeLeft / 60));
        setSeconds(timeLeft % 60);
      }, [timeLeft]);

      const handleBreakDecrement = () => {
        if (breakLength > 1) {
          setBreakLength(prevBreakLength => prevBreakLength - 1);
        }
      };

      const handleBreakIncrement = () => {
        if (breakLength < 60) {
          setBreakLength(prevBreakLength => prevBreakLength + 1);
        }
      };

      const handleSessionDecrement = () => {
        if (sessionLength > 1) {
          setSessionLength(prevSessionLength => prevSessionLength - 1);
          if (!timerRunning) {
            setTimeLeft(prevTimeLeft => prevTimeLeft - 60);
          }
        }
      };

      const handleSessionIncrement = () => {
        if (sessionLength < 60) {
          setSessionLength(prevSessionLength => prevSessionLength + 1);
          if (!timerRunning) {
            setTimeLeft(prevTimeLeft => prevTimeLeft + 60);
          }
        }
      };

      const handleStartStop = () => {
        setTimerRunning(prevTimerRunning => !prevTimerRunning);
      };

      const handleReset = () => {
        setBreakLength(5);
        setSessionLength(25);
        setTimerLabel('Session');
        setTimeLeft(25 * 60);
        setTimerRunning(false);
        audioRef.current.pause();
        audioRef.current.currentTime = 0;
      };

      return (
        <div id="pomodoro-clock" className="container mt-5">
          <div className="row">
            <div className="col-md-6">
              <div id="break-label">Break Length</div>
              <div className="btn-group">
                <button id="break-decrement" className="btn btn-primary" onClick={handleBreakDecrement}>-</button>
                <span id="break-length" className="btn btn-light">{breakLength}</span>
                <button id="break-increment" className="btn btn-primary" onClick={handleBreakIncrement}>+</button>
              </div>
            </div>
            <div className="col-md-6">
              <div id="session-label">Session Length</div>
              <div className="btn-group">
                <button id="session-decrement" className="btn btn-primary" onClick={handleSessionDecrement}>-</button>
                <span id="session-length" className="btn btn-light">{sessionLength}</span>
                <button id="session-increment" className="btn btn-primary" onClick={handleSessionIncrement}>+</button>
              </div>
            </div>
          </div>
          <div className="row mt-3">
            <div className="col text-center">
              <div id="timer-label">{timerLabel}</div>
              <div id="time-left">{`${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`}</div>
            </div>
          </div>
          <div className="row mt-3">
            <div className="col text-center">
              <button id="start_stop" className="btn btn-primary mr-2" onClick={handleStartStop}>{timerRunning ? 'Stop' : 'Start'}</button>
              <button id="reset" className="btn btn-primary" onClick={handleReset}>Reset</button>
            </div>
          </div>
          <audio id="beep" ref={audioRef} src="https://www.soundjay.com/button/beep-07.wav" />
        </div>
      );
    };

    ReactDOM.render(<PomodoroClock />, document.getElementById('root'));

  </script>
</body>
</html>
